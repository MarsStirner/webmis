<?php
namespace ThriftPrescriptionService;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class ActionData {
  static $_TSPEC;

  public $id = null;
  public $actionType_id = null;
  public $note = null;
  public $setPerson_id = null;
  public $moa = null;
  public $voa = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'actionType_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'setPerson_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'moa',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'voa',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['actionType_id'])) {
        $this->actionType_id = $vals['actionType_id'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
      if (isset($vals['setPerson_id'])) {
        $this->setPerson_id = $vals['setPerson_id'];
      }
      if (isset($vals['moa'])) {
        $this->moa = $vals['moa'];
      }
      if (isset($vals['voa'])) {
        $this->voa = $vals['voa'];
      }
    }
  }

  public function getName() {
    return 'ActionData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->actionType_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->note);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->setPerson_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->moa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->voa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActionData');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->actionType_id !== null) {
      $xfer += $output->writeFieldBegin('actionType_id', TType::I32, 2);
      $xfer += $output->writeI32($this->actionType_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      $xfer += $output->writeFieldBegin('note', TType::STRING, 3);
      $xfer += $output->writeString($this->note);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->setPerson_id !== null) {
      $xfer += $output->writeFieldBegin('setPerson_id', TType::I32, 4);
      $xfer += $output->writeI32($this->setPerson_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->moa !== null) {
      $xfer += $output->writeFieldBegin('moa', TType::STRING, 5);
      $xfer += $output->writeString($this->moa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->voa !== null) {
      $xfer += $output->writeFieldBegin('voa', TType::STRING, 6);
      $xfer += $output->writeString($this->voa);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrugComponent {
  static $_TSPEC;

  public $id = null;
  public $action_id = null;
  public $nomen = null;
  public $name = null;
  public $dose = null;
  public $unit = null;
  public $createDateTime = null;
  public $cancelDateTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'nomen',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'dose',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'unit',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'createDateTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'cancelDateTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['nomen'])) {
        $this->nomen = $vals['nomen'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['dose'])) {
        $this->dose = $vals['dose'];
      }
      if (isset($vals['unit'])) {
        $this->unit = $vals['unit'];
      }
      if (isset($vals['createDateTime'])) {
        $this->createDateTime = $vals['createDateTime'];
      }
      if (isset($vals['cancelDateTime'])) {
        $this->cancelDateTime = $vals['cancelDateTime'];
      }
    }
  }

  public function getName() {
    return 'DrugComponent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nomen);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dose);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->unit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->cancelDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrugComponent');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 2);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nomen !== null) {
      $xfer += $output->writeFieldBegin('nomen', TType::I32, 3);
      $xfer += $output->writeI32($this->nomen);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dose !== null) {
      $xfer += $output->writeFieldBegin('dose', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->dose);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->unit !== null) {
      $xfer += $output->writeFieldBegin('unit', TType::I32, 6);
      $xfer += $output->writeI32($this->unit);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createDateTime !== null) {
      $xfer += $output->writeFieldBegin('createDateTime', TType::I64, 7);
      $xfer += $output->writeI64($this->createDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cancelDateTime !== null) {
      $xfer += $output->writeFieldBegin('cancelDateTime', TType::I64, 8);
      $xfer += $output->writeI64($this->cancelDateTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrugIntervalExec {
  static $_TSPEC;

  public $id = null;
  public $action_id = null;
  public $master_id = null;
  public $begDateTime = null;
  public $endDateTime = null;
  public $status = null;
  public $statusDateTime = null;
  public $note = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'master_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'begDateTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'endDateTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'statusDateTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['master_id'])) {
        $this->master_id = $vals['master_id'];
      }
      if (isset($vals['begDateTime'])) {
        $this->begDateTime = $vals['begDateTime'];
      }
      if (isset($vals['endDateTime'])) {
        $this->endDateTime = $vals['endDateTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['statusDateTime'])) {
        $this->statusDateTime = $vals['statusDateTime'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
    }
  }

  public function getName() {
    return 'DrugIntervalExec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->master_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->begDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statusDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->note);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrugIntervalExec');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 2);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->master_id !== null) {
      $xfer += $output->writeFieldBegin('master_id', TType::I32, 3);
      $xfer += $output->writeI32($this->master_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->begDateTime !== null) {
      $xfer += $output->writeFieldBegin('begDateTime', TType::I64, 4);
      $xfer += $output->writeI64($this->begDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endDateTime !== null) {
      $xfer += $output->writeFieldBegin('endDateTime', TType::I64, 5);
      $xfer += $output->writeI64($this->endDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusDateTime !== null) {
      $xfer += $output->writeFieldBegin('statusDateTime', TType::I64, 7);
      $xfer += $output->writeI64($this->statusDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      $xfer += $output->writeFieldBegin('note', TType::STRING, 8);
      $xfer += $output->writeString($this->note);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrugInterval {
  static $_TSPEC;

  public $id = null;
  public $action_id = null;
  public $begDateTime = null;
  public $endDateTime = null;
  public $status = null;
  public $statusDateTime = null;
  public $note = null;
  public $execIntervals = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'begDateTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'endDateTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'statusDateTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'execIntervals',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ThriftPrescriptionService\DrugIntervalExec',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['action_id'])) {
        $this->action_id = $vals['action_id'];
      }
      if (isset($vals['begDateTime'])) {
        $this->begDateTime = $vals['begDateTime'];
      }
      if (isset($vals['endDateTime'])) {
        $this->endDateTime = $vals['endDateTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['statusDateTime'])) {
        $this->statusDateTime = $vals['statusDateTime'];
      }
      if (isset($vals['note'])) {
        $this->note = $vals['note'];
      }
      if (isset($vals['execIntervals'])) {
        $this->execIntervals = $vals['execIntervals'];
      }
    }
  }

  public function getName() {
    return 'DrugInterval';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->begDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->endDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statusDateTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->note);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->execIntervals = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \ThriftPrescriptionService\DrugIntervalExec();
              $xfer += $elem5->read($input);
              $this->execIntervals []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrugInterval');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action_id !== null) {
      $xfer += $output->writeFieldBegin('action_id', TType::I32, 2);
      $xfer += $output->writeI32($this->action_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->begDateTime !== null) {
      $xfer += $output->writeFieldBegin('begDateTime', TType::I64, 3);
      $xfer += $output->writeI64($this->begDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endDateTime !== null) {
      $xfer += $output->writeFieldBegin('endDateTime', TType::I64, 4);
      $xfer += $output->writeI64($this->endDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusDateTime !== null) {
      $xfer += $output->writeFieldBegin('statusDateTime', TType::I64, 6);
      $xfer += $output->writeI64($this->statusDateTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->note !== null) {
      $xfer += $output->writeFieldBegin('note', TType::STRING, 7);
      $xfer += $output->writeString($this->note);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execIntervals !== null) {
      if (!is_array($this->execIntervals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('execIntervals', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->execIntervals));
        {
          foreach ($this->execIntervals as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Prescription {
  static $_TSPEC;

  public $actInfo = null;
  public $drugComponents = null;
  public $drugIntervals = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'actInfo',
          'type' => TType::STRUCT,
          'class' => '\ThriftPrescriptionService\ActionData',
          ),
        2 => array(
          'var' => 'drugComponents',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ThriftPrescriptionService\DrugComponent',
            ),
          ),
        3 => array(
          'var' => 'drugIntervals',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ThriftPrescriptionService\DrugInterval',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['actInfo'])) {
        $this->actInfo = $vals['actInfo'];
      }
      if (isset($vals['drugComponents'])) {
        $this->drugComponents = $vals['drugComponents'];
      }
      if (isset($vals['drugIntervals'])) {
        $this->drugIntervals = $vals['drugIntervals'];
      }
    }
  }

  public function getName() {
    return 'Prescription';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->actInfo = new \ThriftPrescriptionService\ActionData();
            $xfer += $this->actInfo->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->drugComponents = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \ThriftPrescriptionService\DrugComponent();
              $xfer += $elem12->read($input);
              $this->drugComponents []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->drugIntervals = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \ThriftPrescriptionService\DrugInterval();
              $xfer += $elem18->read($input);
              $this->drugIntervals []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Prescription');
    if ($this->actInfo !== null) {
      if (!is_object($this->actInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('actInfo', TType::STRUCT, 1);
      $xfer += $this->actInfo->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drugComponents !== null) {
      if (!is_array($this->drugComponents)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('drugComponents', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->drugComponents));
        {
          foreach ($this->drugComponents as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->drugIntervals !== null) {
      if (!is_array($this->drugIntervals)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('drugIntervals', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->drugIntervals));
        {
          foreach ($this->drugIntervals as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PrescriptionList {
  static $_TSPEC;

  public $prescriptionList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'prescriptionList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ThriftPrescriptionService\Prescription',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['prescriptionList'])) {
        $this->prescriptionList = $vals['prescriptionList'];
      }
    }
  }

  public function getName() {
    return 'PrescriptionList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->prescriptionList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \ThriftPrescriptionService\Prescription();
              $xfer += $elem26->read($input);
              $this->prescriptionList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PrescriptionList');
    if ($this->prescriptionList !== null) {
      if (!is_array($this->prescriptionList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('prescriptionList', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->prescriptionList));
        {
          foreach ($this->prescriptionList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SavePrescrListException extends TException {
  static $_TSPEC;

  public $message = null;
  public $error_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['error_code'])) {
        $this->error_code = $vals['error_code'];
      }
    }
  }

  public function getName() {
    return 'SavePrescrListException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->error_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SavePrescrListException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->error_code !== null) {
      $xfer += $output->writeFieldBegin('error_code', TType::I32, 2);
      $xfer += $output->writeI32($this->error_code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


